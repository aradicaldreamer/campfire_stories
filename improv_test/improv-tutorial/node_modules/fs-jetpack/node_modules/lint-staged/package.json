{
  "_args": [
    [
      {
        "raw": "lint-staged@https://registry.npmjs.org/lint-staged/-/lint-staged-3.6.1.tgz",
        "scope": null,
        "escapedName": "lint-staged",
        "name": "lint-staged",
        "rawSpec": "https://registry.npmjs.org/lint-staged/-/lint-staged-3.6.1.tgz",
        "spec": "https://registry.npmjs.org/lint-staged/-/lint-staged-3.6.1.tgz",
        "type": "remote"
      },
      "/Users/mattdeline/Desktop/Dissertation Project/improv-tutorial/node_modules/fs-jetpack"
    ]
  ],
  "_from": "lint-staged@https://registry.npmjs.org/lint-staged/-/lint-staged-3.6.1.tgz",
  "_id": "lint-staged@3.6.1",
  "_inCache": true,
  "_location": "/fs-jetpack/lint-staged",
  "_phantomChildren": {},
  "_requested": {
    "raw": "lint-staged@https://registry.npmjs.org/lint-staged/-/lint-staged-3.6.1.tgz",
    "scope": null,
    "escapedName": "lint-staged",
    "name": "lint-staged",
    "rawSpec": "https://registry.npmjs.org/lint-staged/-/lint-staged-3.6.1.tgz",
    "spec": "https://registry.npmjs.org/lint-staged/-/lint-staged-3.6.1.tgz",
    "type": "remote"
  },
  "_requiredBy": [],
  "_resolved": "https://registry.npmjs.org/lint-staged/-/lint-staged-3.6.1.tgz",
  "_shasum": "24423c8b7bd99d96e15acd1ac8cb392a78e58582",
  "_shrinkwrap": null,
  "_spec": "lint-staged@https://registry.npmjs.org/lint-staged/-/lint-staged-3.6.1.tgz",
  "_where": "/Users/mattdeline/Desktop/Dissertation Project/improv-tutorial/node_modules/fs-jetpack",
  "author": {
    "name": "Andrey Okonetchnikov",
    "email": "andrey@okonet.ru"
  },
  "bin": {
    "lint-staged": "index.js"
  },
  "bugs": {
    "url": "https://github.com/okonet/lint-staged/issues"
  },
  "config": {
    "commitizen": {
      "path": "./node_modules/cz-conventional-changelog"
    }
  },
  "dependencies": {
    "app-root-path": "^2.0.0",
    "cosmiconfig": "^1.1.0",
    "execa": "^0.7.0",
    "listr": "^0.12.0",
    "lodash.chunk": "^4.2.0",
    "minimatch": "^3.0.0",
    "npm-which": "^3.0.1",
    "p-map": "^1.1.1",
    "staged-git-files": "0.0.4"
  },
  "description": "Lint files staged by git",
  "devDependencies": {
    "babel-core": "^6.10.4",
    "babel-jest": "^20.0.0",
    "babel-plugin-transform-runtime": "^6.23.0",
    "babel-preset-env": "^1.4.0",
    "babel-register": "^6.16.3",
    "babel-runtime": "^6.23.0",
    "cz-conventional-changelog": "^1.2.0",
    "eslint": "^3.9.1",
    "eslint-config-okonet": "^4.0.0",
    "expect": "^1.20.2",
    "is-promise": "^2.1.0",
    "jest": "^20.0.1",
    "jsonlint": "^1.6.2",
    "jsonlint-cli": "^1.0.1",
    "npm-check": "^5.2.2",
    "pre-commit": "^1.1.3",
    "semantic-release": "^6.3.2"
  },
  "greenkeeper": {
    "ignore": [
      "cosmiconfig"
    ]
  },
  "homepage": "https://github.com/okonet/lint-staged#readme",
  "keywords": [
    "lint",
    "git",
    "staged",
    "javascript",
    "css",
    "scss",
    "sass",
    "eslint",
    "stylelint",
    "code",
    "quality"
  ],
  "license": "MIT",
  "main": "index.js",
  "name": "lint-staged",
  "optionalDependencies": {},
  "pre-commit": "pre-commit",
  "readme": "# lint-staged [![Build Status](https://travis-ci.org/okonet/lint-staged.svg?branch=master)](https://travis-ci.org/okonet/lint-staged) [![npm version](https://badge.fury.io/js/lint-staged.svg)](https://badge.fury.io/js/lint-staged)\n\nRun linters against staged git files and don't let :poop: slip into your code base!\n\n## Why\n\n[Read the Medium post](https://medium.com/@okonetchnikov/make-linting-great-again-f3890e1ad6b8#.8qepn2b5l)\n\nLinting makes more sense when running before committing your code. By doing that you can ensure no errors are going into repository and enforce code style. But running a lint process on a whole project is slow and linting results can be irrelevant. Ultimately you only want to lint files that will be committed.\n\nThis project contains a script that will run arbitrary npm and shell tasks with a list of staged files as an argument, filtered by a specified glob pattern.\n\n## Related blogs posts\n\n* [Running Jest Tests Before Each Git Commit](https://benmccormick.org/2017/02/26/running-jest-tests-before-each-git-commit/)\n\n> If you've written one, please submit a PR with the link to it!\n\n## Installation and setup\n\n1. `npm install --save-dev lint-staged husky`\n1. Install and setup your linters just like you would do normally. Add appropriate `.eslintrc`, `.stylelintrc`, etc.\n1. Update your `package.json` like this:\n  ```json\n  {\n    \"scripts\": {\n      \"precommit\": \"lint-staged\"\n    },\n    \"lint-staged\": {\n      \"*.js\": [\"eslint --fix\", \"git add\"]\n    }\n  }\n  ```\n\nNow change a few files, `git add` some of them to your commit and try to `git commit` them.\n\nSee [examples](#examples) and [configuration](#configuration) below.\n\n> I recommend using [husky](https://github.com/typicode/husky) to manage git hooks but you can use any other tool.\n\n> **NOTE:** \n>\n> If you're using commitizen and having following npm-script `{ commit: git-cz }`, `precommit` hook will run twice before commitizen cli and after the commit. [This buggy behaviour is introduced by husky](https://github.com/okonet/lint-staged/issues/152#issuecomment-306046520).\n>\n> To mitigate this rename your `commit` npm script to something non git hook namespace like, for example `{ cz: git-cz }`\n\n## Configuration\n\nStarting with v3.1 you can now use different ways of configuring it:\n\n* `lint-staged` object in your `package.json`\n* `.lintstagedrc` file in JSON or YML format\n* `lint-staged.config.js` file in JS format\n\nSee [cosmiconfig](https://github.com/davidtheclark/cosmiconfig) for more details on what formats are supported.\n\nLint-staged supports simple and advanced config formats.\n\n### Simple config format\n\nShould be an object where each value is a command to run and its key is a glob pattern to use for this command. This package uses [minimatch](https://github.com/isaacs/minimatch) for glob patterns.\n\n#### `package.json` example:\n```json\n{\n  \"scripts\": {\n    \"my-task\": \"your-command\",\n  },\n  \"lint-staged\": {\n    \"*\": \"my-task\"\n  }\n}\n```\n\n#### `.lintstagedrc` example\n\n```json\n{\n\t\"*\": \"my-task\"\n}\n```\n\nThis config will execute `npm run my-task` with the list of currently staged files passed as arguments.\n\nSo, considering you did `git add file1.ext file2.ext`, lint-staged will run the following command:\n\n`npm run my-task -- file1.ext file2.ext`\n\n### Advanced config format\nTo set options and keep lint-staged extensible, advanced format can be used. This should hold linters object in `linters` property.\n\n## Options\n\n* `linters` — `Object` — keys (`String`) are glob patterns, values (`Array<String> | String`) are commands to execute.\n* `gitDir` — Sets the relative path to the `.git` root. Useful when your `package.json` is located in a subdirectory. See [working from a subdirectory](#working-from-a-subdirectory)\n* `concurrent` — *true* — runs linters for each glob pattern simultaneously. If you don’t want this, you can set `concurrent: false`\n* `chunkSize` — Max allowed chunk size based on number of files for glob pattern. This is important on windows based systems to avoid command length limitations. See #147\n* `subTaskConcurrency` — `2` — Controls concurrency for processing chunks generated for each linter.\n* `verbose` — *false* — runs lint-staged in verbose mode. When `true` it will use https://github.com/SamVerschueren/listr-verbose-renderer.\n* `globOptions` — `{ matchBase: true, dot: true }` — [minimatch options](https://github.com/isaacs/minimatch#options) to customize how glob patterns match files.\n\n## Filtering files\n\nIt is possible to run linters for certain paths only by using [minimatch](https://github.com/isaacs/minimatch) patterns. The paths used for filtering via minimatch are relative to the directory that contains the `.git` directory. The paths passed to the linters are absolute to avoid confusion in case they're executed with a different working directory, as would be the case when using the `gitDir` option.\n\n```js\n{\n\t// .js files anywhere in the project\n\t\"*.js\": \"eslint\",\n\t// .js files anywhere in the project\n\t\"**/*.js\": \"eslint\",\n\t// .js file in the src directory\n\t\"src/*.js\": \"eslint\",\n\t// .js file anywhere within and below the src directory\n\t\"src/**/*.js\": \"eslint\",\n}\n```\n\n## What commands are supported?\n\nSupported are both local npm scripts (`npm run-script`), or any executables installed locally or globally via `npm` as well as any executable from your $PATH.\n\n> Using globally installed scripts is discouraged, since lint-staged may not work for someone who doesn’t have it installed.\n\n`lint-staged` is using [npm-which](https://github.com/timoxley/npm-which) to locate locally installed scripts, so you don't need to add `{ \"eslint\": \"eslint\" }` to the `scripts` section of your `package.json`. So  in your `.lintstagedrc` you can write:\n\n```json\n{\n\t\"*.js\": \"eslint --fix\"\n}\n```\n\nPass arguments to your commands separated by space as you would do in the shell. See [examples](#examples) below.\n\nStarting from [v2.0.0](https://github.com/okonet/lint-staged/releases/tag/2.0.0) sequences of commands are supported. Pass an array of commands instead of a single one and they will run sequentially. This is useful for running autoformatting tools like `eslint --fix` or `stylefmt` but can be used for any arbitrary sequences.\n\n## Reformatting the code\n\nTools like ESLint/TSLint or stylefmt can reformat your code according to an appropriate config  by running `eslint --fix`/`tslint --fix`. After the code is reformatted, we want it to be added to the same commit. This can be done using following config:\n\n```json\n{\n\t\"*.js\": [\"eslint --fix\", \"git add\"]\n}\n```\n\n~~Starting from v3.1, lint-staged will stash you remaining changes (not added to the index) and restore them from stash afterwards. This allows you to create partial commits with hunks using `git add --patch`.~~ This is still [not resolved](https://github.com/okonet/lint-staged/issues/62)\n\n## Working from a subdirectory\n\nIf your `package.json` is located in a subdirectory of the git root directory, you can use `gitDir` relative path to point there in order to make lint-staged work.\n\n```json\n{\n    \"gitDir\": \"../\",\n    \"linters\":{\n        \"*\": \"my-task\"\n    }\n}\n```\n\n## Examples\n\nAll examples assuming you’ve already set up lint-staged and husky in the `package.json`.\n\n```json\n{\n  \"name\": \"My project\",\n  \"version\": \"0.1.0\",\n  \"scripts\": {\n    \"precommit\": \"lint-staged\"\n  },\n  \"lint-staged\": {}\n}\n```\n\n*Note we don’t pass a path as an argument for the runners. This is important since lint-staged will do this for you. Please don’t reuse your tasks with paths from package.json.*\n\n### ESLint with default parameters for `*.js` and `*.jsx` running as a pre-commit hook\n\n```json\n{\n\t\"*.{js,jsx}\": \"eslint\"\n}\n```\n\n### Automatically fix code style with `--fix` and add to commit\n\n```json\n{\n\t\"*.js\": [\"eslint --fix\", \"git add\"]\n}\n```\n\nThis will run `eslint --fix` and automatically add changes to the commit. Please note, that it doesn’t work well with committing hunks (`git add -p`).\n\n\n### Automatically fix code style with `prettier` for javascript + flow or typescript\n\n```json\n{\n\t\"*.{js,jsx}\": [\"prettier --parser flow --write\", \"git add\"]\n}\n```\n\n```json\n{\n\t\"*.{ts,tsx}\": [\"prettier --parser typescript --write\", \"git add\"]\n}\n```\n\n\n### Stylelint for CSS with defaults and for SCSS with SCSS syntax\n\n```json\n{\n\t\"*.css\": \"stylelint\",\n\t\"*.scss\": \"stylelint --syntax=scss\"\n}\n```\n\n### Automatically fix SCSS style with `stylefmt` and add to commit\n\n```json\n{\n\t\"*.scss\": [\"stylefmt\", \"stylelint --syntax scss\", \"git add\"]\n}\n```\n\n### Run PostCSS sorting, add files to commit and run Stylelint to check\n\n```json\n{\n\t\"*.scss\": [\n\t  \"postcss --config path/to/your/config --replace\",\n\t  \"stylelint\",\n\t  \"git add\"\n\t]\n}\n```\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/okonet/lint-staged.git"
  },
  "scripts": {
    "deps": "npm-check -s",
    "deps:update": "npm-check -u",
    "lint": "eslint .",
    "lint:fix": "npm run lint -- --fix",
    "postinstall": "echo \"🚫💩 lint-staged installed! \nDo not forget to configure it. See https://github.com/okonet/lint-staged/blob/master/README.md\" && exit 0",
    "pre-commit": "node index.js",
    "semantic-release": "semantic-release pre && npm publish && semantic-release post",
    "test": "jest --coverage"
  },
  "version": "3.6.1"
}
